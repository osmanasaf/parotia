🎯 Parotia - Duygu ve Geçmişe Dayalı Hibrit Film Öneri Sistemi Geliştirme Dokümanı

Bu doküman, Parotia projesinin AI destekli film öneri sisteminin hibrit (duygu + izleme geçmişi) yapısına göre nasıl geliştirileceğini mimari düzeyde tanımlar.

🛠️ Amaç

Kullanıcının hem duygusal metinlerinden hem de izleme geçmişi/puanlarından yola çıkarak semantik benzerlik ve içerik bazlı filtreleme ile kişisel öneriler sunmak.

🔄 Genel Akış Diyagramı

Kullanıcı → [Duygusal metin] ┐
                            │
Kullanıcı → [İzleme geçmişi] ┼→ [Öneri Motoru] → [Film listesi]
                            │
                   Film veritabanı + embedding

📌 Sistem Bileşenleri

1. Kullanıcı Girdisi

Duygusal metin ("Bugün kendimi çok yalnız hissediyorum")

İzlenen ve puanlanan içerikler

Opsiyonel filtreler (tür, yıl, platform)

2. Film Veritabanı

TMDB üzerinden alınan filmler (popular, top-rated vs.)

Her film için embedding vektörü

Film başlığı, açıklama, tür, yıl, TMDB ID, poster vs.

3. Embedding Katmanı

Kullanıcının metni ve film açıklamaları sentence-transformers gibi bir model ile vektöre çevrilir

Benzerlikler cosine similarity veya FAISS ile hesaplanır

4. Hibrit Öneri Motoru

Kullanıcının embedding vektörü + geçmişte beğendiği filmlerin ortalama embedding’i

Ağırlıklı ortalama (duygu: %70, geçmiş: %30 gibi) ile tek embedding elde edilir

Bu vektör veritabanındaki tüm film vektörleriyle karşılaştırılır

En yüksek skora sahip filmler sıralanır

5. Sonuçların Hazırlanması

İlk 10 öneri + skorları + TMDB ID + poster path

Geri bildirim özelliği ("Beğendim / Beğenmedim") ile sonraki öneriler geliştirilebilir

🧠 Ek Özellikler

✳️ Öğrenme ve Uyarlanabilirlik

Kullanıcıların tepkileri (tıklama, puan, yorum) ile embedding ayarı güncellenebilir

Filmlere göre tematik kümeleme yapılabilir (üzücü, motive edici vs.)

✳️ Önbellekleme

TMDB verisi, embedding çıktısı ve öneri sonuçları Redis veya JSON ile cache'lenebilir

✳️ Filtreleme Desteği

Tür, yıl, dil, ülke gibi meta bilgiler üzerinden öneri öncesi filtreleme yapılabilir

🔧 Geliştirme Planı

TMDB'den verilerin alınması ve işlenmesi

Film embedding'lerinin çıkarılması ve veritabanına kaydedilmesi

Kullanıcıdan duygu metni + izleme geçmişi alınması

Hibrit embedding hesaplama ve benzerlik kıyaslama

En yüksek skorlu filmlerin önerilmesi

Kullanıcı arayüzü ile entegrasyon (Vue.js)

Geri bildirim sisteminin kurulması

Önbellekleme stratejisinin uygulanması

📦 Dağıtım

Backend (FastAPI) Railway üzerinde çalışır

Frontend (Vue.js) Vercel'de barındırılır

Veritabanı: PostgreSQL (pgvector opsiyonel)

Cache: Redis (opsiyonel)

Bu yapı hem anlamlı, kişiselleştirilmiş hem de geliştirilebilir bir öneri sistemi için temel oluşturur. Gerektiğinde derin öğrenme temelli embedding modellerine veya kullanıcı segmentasyonuna geçilebilir.

